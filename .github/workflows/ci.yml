name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_youtube_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Wait for MySQL
      run: |
        until mysql -h"127.0.0.1" -u"test_user" -p"test_password" -e "SELECT 1"; do
          echo "Waiting for MySQL..."
          sleep 5
        done

    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_USER=test_user" >> .env
        echo "DB_PASS=test_password" >> .env
        echo "DB_NAME=test_youtube_db" >> .env
        echo "YOUTUBE_API_KEY=test_api_key" >> .env

    - name: Create database tables
      run: python create_tables.py

    - name: Lint with flake8
      run: |
        flake8 web/ src/ tests/ --max-line-length=120

    - name: Check formatting with black
      run: |
        black --check web/ src/ tests/ tools/ --line-length=120

    - name: Check import sorting with isort
      run: |
        isort --check-only web/ src/ tests/ tools/ --profile black --line-length=120

    - name: Type check with mypy (continue on error)
      run: |
        mypy web/ --ignore-missing-imports || true

    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short --maxfail=5

    - name: Execute notebooks (non-blocking)
      run: |
        python tools/2_run_notebooks.py || true

    - name: Generate coverage report
      run: |
        pytest tests/ --cov=web --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r web/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-and-package:
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build tools
      run: |
        pip install build wheel

    - name: Build package
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/
