# ðŸ¤– Automation Schedule Templates
# Explicit user control over all automated processes

# =============================================================================
# CONSERVATIVE SCHEDULE (Minimal Automation)
# =============================================================================
conservative:
  description: "Minimal automation for users who prefer manual control"
  frequency: "weekly"
  processes:
    - name: "weekly_health_check"
      command: "make health-check"
      schedule: "0 9 * * 1"  # Monday 9 AM
      description: "Weekly system health validation"
      user_control: "Can be disabled anytime with: make disable-health-checks"

    - name: "monthly_cleanup"
      command: "make clean"
      schedule: "0 2 1 * *"  # First day of month, 2 AM
      description: "Monthly cleanup of temporary files"
      user_control: "Safe operation, only removes temp files"

# =============================================================================
# STANDARD SCHEDULE (Recommended for Most Users)
# =============================================================================
standard:
  description: "Balanced automation for regular music industry use"
  frequency: "daily"
  processes:
    - name: "daily_etl"
      command: "make run-etl"
      schedule: "0 2 * * *"  # Daily 2 AM
      description: "Daily data collection from YouTube API"
      user_control: "Respects API rate limits, can be paused anytime"
      dependencies: ["YOUTUBE_API_KEY configured"]

    - name: "daily_quality_check"
      command: "make quality-check"
      schedule: "0 3 * * *"  # Daily 3 AM (after ETL)
      description: "Data quality validation after ETL"
      user_control: "Read-only operation, generates reports only"

    - name: "weekly_notebooks"
      command: "make run-notebooks"
      schedule: "0 6 * * 1"  # Monday 6 AM
      description: "Generate weekly analytics notebooks"
      user_control: "Creates files in notebooks/executed/, no external calls"

    - name: "weekly_executive_report"
      command: "make executive-report"
      schedule: "0 9 * * 1"  # Monday 9 AM
      description: "Generate executive dashboard and insights"
      user_control: "Email delivery optional, files saved locally"

# =============================================================================
# AGGRESSIVE SCHEDULE (High-Frequency Updates)
# =============================================================================
aggressive:
  description: "High-frequency automation for real-time monitoring"
  frequency: "multiple_daily"
  processes:
    - name: "morning_etl"
      command: "make run-etl"
      schedule: "0 6 * * *"  # Daily 6 AM
      description: "Morning data collection"

    - name: "evening_etl"
      command: "make run-etl"
      schedule: "0 18 * * *"  # Daily 6 PM
      description: "Evening data collection"

    - name: "hourly_health_check"
      command: "make health-check"
      schedule: "0 * * * *"  # Every hour
      description: "Continuous system monitoring"
      user_control: "Can be resource intensive, monitor system load"

    - name: "real_time_trending"
      command: "python scripts/monitor_trending.py"
      schedule: "*/15 * * * *"  # Every 15 minutes
      description: "Real-time trend detection"
      user_control: "High API usage, ensure adequate quota"

# =============================================================================
# ENTERPRISE SCHEDULE (Production Environment)
# =============================================================================
enterprise:
  description: "Production-grade automation with monitoring and alerting"
  frequency: "continuous"
  processes:
    - name: "production_etl"
      command: "make run-production"
      schedule: "0 1 * * *"  # Daily 1 AM
      description: "Production ETL with full error handling"
      monitoring: true
      alerting: true

    - name: "system_monitoring"
      command: "make enterprise-monitor"
      schedule: "@reboot"  # Start on system boot
      description: "Continuous system monitoring"
      user_control: "Runs as background service, can be stopped anytime"

    - name: "security_scan"
      command: "make security-scan"
      schedule: "0 4 * * 0"  # Sunday 4 AM
      description: "Weekly security vulnerability scan"

    - name: "compliance_check"
      command: "make compliance-check"
      schedule: "0 5 * * 0"  # Sunday 5 AM
      description: "Weekly compliance validation"

    - name: "performance_benchmark"
      command: "make performance-test"
      schedule: "0 6 * * 0"  # Sunday 6 AM
      description: "Weekly performance benchmarking"

# =============================================================================
# RESEARCH SCHEDULE (Data Science Workflows)
# =============================================================================
research:
  description: "Automation optimized for research and experimentation"
  frequency: "flexible"
  processes:
    - name: "research_data_collection"
      command: "python scripts/research_etl.py"
      schedule: "0 3 * * *"  # Daily 3 AM
      description: "Research-focused data collection"
      user_control: "Includes experimental features, review logs regularly"

    - name: "model_training"
      command: "python scripts/train_models.py"
      schedule: "0 4 * * 0"  # Sunday 4 AM
      description: "Weekly model retraining with new data"
      user_control: "Resource intensive, ensure adequate compute"

    - name: "research_notebooks"
      command: "make research-pipeline"
      schedule: "0 8 * * 1"  # Monday 8 AM
      description: "Generate research notebooks and reports"

    - name: "data_export"
      command: "make export-research-data"
      schedule: "0 23 * * 0"  # Sunday 11 PM
      description: "Export data for external analysis tools"

# =============================================================================
# CUSTOM SCHEDULE TEMPLATE
# =============================================================================
custom:
  description: "Template for creating custom automation schedules"
  frequency: "user_defined"
  processes:
    - name: "custom_process_1"
      command: "echo 'Replace with your command'"
      schedule: "0 0 * * *"  # Replace with your schedule
      description: "Replace with your description"
      user_control: "Add your control mechanisms"

    - name: "custom_process_2"
      command: "echo 'Add more processes as needed'"
      schedule: "0 12 * * *"
      description: "Multiple processes can be defined"

# =============================================================================
# SCHEDULE MANAGEMENT COMMANDS
# =============================================================================
management:
  commands:
    generate_cron:
      description: "Generate CRON configuration from template"
      usage: "make generate-cron-config SCHEDULE=standard"

    apply_schedule:
      description: "Apply generated schedule to system CRON"
      usage: "make apply-cron-schedule"
      warning: "Review generated configuration before applying"

    disable_automation:
      description: "Disable all automated processes"
      usage: "make disable-automation"

    enable_automation:
      description: "Re-enable previously configured automation"
      usage: "make enable-automation"

    list_active:
      description: "List currently active automated processes"
      usage: "make list-automation"

    monitor_automation:
      description: "Monitor automation execution and logs"
      usage: "make monitor-automation"

# =============================================================================
# USER CONTROL MECHANISMS
# =============================================================================
user_control:
  principles:
    - "All automation requires explicit user setup"
    - "No processes start automatically without user permission"
    - "Complete visibility into what runs when"
    - "Easy disable/enable for all automated tasks"
    - "Comprehensive logging of all automated activities"

  safety_features:
    - name: "Dry Run Mode"
      description: "Test automation without executing commands"
      usage: "make test-automation SCHEDULE=standard"

    - name: "Rollback Capability"
      description: "Undo automation configuration"
      usage: "make rollback-automation"

    - name: "Resource Monitoring"
      description: "Monitor system resources during automation"
      usage: "make monitor-resources"

    - name: "Emergency Stop"
      description: "Immediately stop all automated processes"
      usage: "make emergency-stop"

# =============================================================================
# NOTIFICATION CONFIGURATION
# =============================================================================
notifications:
  email:
    enabled: false  # User must explicitly enable
    smtp_server: "smtp.gmail.com"
    smtp_port: 587
    username: "your_email@gmail.com"
    password: "your_app_password"  # Use app-specific password
    recipients: ["executive@company.com"]

  slack:
    enabled: false  # User must explicitly enable
    webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
    channel: "#music-analytics"

  discord:
    enabled: false  # User must explicitly enable
    webhook_url: "https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK"

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR
  file: "logs/automation.log"
  rotation: "daily"
  retention: "30 days"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

  categories:
    - name: "etl"
      description: "Data collection and processing"
      file: "logs/etl_automation.log"

    - name: "monitoring"
      description: "System health and performance"
      file: "logs/monitoring_automation.log"

    - name: "reports"
      description: "Report generation and delivery"
      file: "logs/reports_automation.log"
